{"version":3,"sources":["components/Header.jsx","gameLogic/Ship.js","gameLogic/Cell.js","gameLogic/Gameboard.js","gameLogic/Player.js","gameLogic/ComputerPlayer.js","gameLogic/GameController.js","components/Cell.jsx","components/BoardRow.jsx","components/PlayerBoard.jsx","components/NextShipInfo.jsx","components/Modal.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["Header","className","href","Ship","length","this","hits","Array","fill","position","every","element","Cell","attacked","ship","shipPos","hit","Gameboard","gridLength","grid","i","push","j","x","y","shipLength","verticle","checkBounds","checkDuplicate","validatePlacement","newShip","recieveShip","receiveAttack","Math","floor","random","isSunk","Player","playerBoard","placeShip","targetPlayer","boardLength","counter","ComputerPlayer","shipLengths","findPlacement","allShot","targetGrid","checkRow","rowNum","GameController","oldController","humanPlayer","computerPlayer","winner","populateBoard","game","error","recieveAttack","allSunk","computerAttack","selectTarget","props","handleEvent","gridInfo","colIndex","rowIndex","playerFlag","aria-label","data-x","data-y","onClick","role","tabIndex","BoardRow","rowInfo","map","gridItem","PlayerBoard","player","playerAttack","event","target","dataset","boardRow","NextShipInfo","orientationStr","nextShip","orientation","swapOrientation","undefined","type","Modal","resetGame","Footer","App","useState","gameController","setGameController","shipsToPlace","setShipsToPlace","setOrientation","useEffect","oldGame","gameStart","preventDefault","xCord","parseInt","yCord","humanPlace","newGame","shift","humanAttack","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2b657ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header className=\"header\">\n    <div className=\"header__title\">\n      BattleShip\n    </div>\n    <a href=\"http://mooresa.github.io\" className=\"header__link\">\n      Home\n    </a>\n  </header>\n);\n\nexport default Header;\n","class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = new Array(length).fill(false);\n  }\n\n  // returns true if the attack was valid\n  hit(position) {\n    if (position > this.hits.length) {\n      return false;\n    }\n    this.hits[position] = true;\n    return true;\n  }\n\n  isSunk() {\n    return this.hits.every((element) => element);\n  }\n}\n\nexport default Ship;\n","class Cell {\n  constructor() {\n    this.attacked = false;\n    this.ship = null;\n    this.shipPos = null;\n  }\n\n  recieveShip(ship, shipPos) {\n    if (this.ship) return false;\n    this.ship = ship;\n    this.shipPos = shipPos;\n    return true;\n  }\n\n  receiveAttack() {\n    if (this.attacked) {\n      return false;\n    }\n    this.attacked = true;\n    if (this.ship) {\n      this.ship.hit(this.shipPos);\n    }\n    return true;\n  }\n}\n\nexport default Cell;\n","import Ship from './Ship';\nimport Cell from './Cell';\n\nclass Gameboard {\n  constructor(gridLength = 10) {\n    this.grid = [];\n\n    for (let i = 0; i < gridLength; i += 1) {\n      this.grid.push([]);\n      for (let j = 0; j < gridLength; j += 1) {\n        this.grid[i].push(new Cell());\n      }\n    }\n  }\n\n  validatePlacement(x, y, shipLength, verticle) {\n    if (this.checkBounds(x, y, shipLength, verticle) === false) {\n      return false;\n    }\n    if (this.checkDuplicate(x, y, shipLength, verticle) === false) {\n      return false;\n    }\n    return true;\n  }\n\n  checkDuplicate(x, y, shipLength, verticle) {\n    for (let i = 0; i < shipLength; i += 1) {\n      if (verticle) {\n        if (this.grid[y + i][x].ship) {\n          return false;\n        }\n      } else if (this.grid[y][x + i].ship) return false;\n    }\n    return true;\n  }\n\n  checkBounds(x, y, shipLength, verticle) {\n    if (verticle) {\n      if ((y + shipLength) > this.grid.length) return false;\n    } else if (x + shipLength > this.grid.length) return false;\n    return true;\n  }\n\n  placeShip(x, y, shipLength, verticle) {\n    if (!this.validatePlacement(x, y, shipLength, verticle)) {\n      return false;\n    }\n    const newShip = new Ship(shipLength);\n    for (let i = 0; i < shipLength; i += 1) {\n      if (verticle) {\n        this.grid[y + i][x].recieveShip(newShip, i);\n      } else {\n        this.grid[y][x + i].recieveShip(newShip, i);\n      }\n    }\n    return true;\n  }\n\n  receiveAttack(x, y) {\n    if (x > this.grid.length || y > this.grid.length) {\n      // bad attack\n      return false;\n    }\n    return this.grid[y][x].receiveAttack();\n  }\n\n  // get two random nums within the limits of the grid\n  generateShipGrid() {\n    const x = Math.floor(Math.random() * this.grid.length);\n    const y = Math.floor(Math.random() * this.grid.length);\n    return ({ x, y });\n  }\n\n  allSunk() {\n    for (let i = 0; i < this.grid.length; i += 1) {\n      for (let j = 0; j < this.grid[i].length; j += 1) {\n        const { ship } = this.grid[i][j];\n        if (ship) {\n          if (!ship.isSunk()) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  allShot() {\n    for (let i = 0; i < this.grid.length; i += 1) {\n      for (let j = 0; j < this.grid.length; j += 1) {\n        if (!this.grid[i][j].attacked) return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport default Gameboard;\n","import Gameboard from './Gameboard';\n\nclass Player {\n  constructor(gridLength) {\n    this.playerBoard = new Gameboard(gridLength);\n  }\n\n  placeShip(x, y, shipLength, verticle) {\n    return this.playerBoard.placeShip(x, y, shipLength, verticle);\n  }\n\n  recieveAttack(x, y) {\n    return this.playerBoard.receiveAttack(x, y);\n  }\n\n  // this method is for use by the AI to randomly choose an space\n  static chooseAttack(targetPlayer) {\n    const boardLength = targetPlayer.playerBoard.grid.length;\n    let x = Math.floor(Math.random() * boardLength);\n    let y = Math.floor(Math.random() * boardLength);\n    let counter = 1;\n    while (targetPlayer.playerBoard.grid[y][x].attacked) {\n      counter += 1;\n      x = Math.floor(Math.random() * boardLength);\n      y = Math.floor(Math.random() * boardLength);\n      // there is a better way of doing this, but I don't want to.\n      if (counter >= 30) return ({ x, y });\n    }\n    return ({ x, y });\n  }\n}\n\nexport default Player;\n","import Player from './Player';\n\nclass ComputerPlayer extends Player {\n  findPlacement(shipLength) {\n    let y = Math.floor(Math.random() * this.playerBoard.grid.length);\n    let x = Math.floor(Math.random() * this.playerBoard.grid.length);\n    // this returns a bool with 50/50 either way\n    let verticle = (Math.random() < 0.5);\n\n    while (!this.placeShip(x, y, shipLength, verticle)) {\n      y = Math.floor(Math.random() * this.playerBoard.grid.length);\n      x = Math.floor(Math.random() * this.playerBoard.grid.length);\n      verticle = Math.random() < 0.5;\n    }\n  }\n\n  populateBoard() {\n    const shipLengths = [5, 4, 3, 3, 2, 2];\n    for (let i = 0; i < shipLengths.length; i += 1) {\n      this.findPlacement(shipLengths[i]);\n    }\n  }\n\n  static selectTarget(targetPlayer) {\n    if (targetPlayer.playerBoard.allShot()) return false;\n    const targetGrid = targetPlayer.playerBoard.grid;\n    let y = Math.floor(Math.random() * targetGrid.length);\n    while (!this.checkRow(targetGrid, y)) {\n      y = Math.floor(Math.random() * targetGrid.length);\n    }\n    let x = Math.floor(Math.random() * targetGrid.length);\n    while (targetGrid[y][x].attacked) {\n      x = Math.floor(Math.random() * targetGrid.length);\n    }\n    return { x, y };\n  }\n\n  static checkRow(targetGrid, rowNum) {\n    for (let i = 0; i < targetGrid.length; i += 1) {\n      if (!targetGrid[rowNum][i].attacked) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport default ComputerPlayer;\n","import Player from './Player';\nimport ComputerPlayer from './ComputerPlayer';\n\nclass GameController {\n  constructor(oldController) {\n    if (oldController) {\n      this.humanPlayer = oldController.humanPlayer;\n      this.computerPlayer = oldController.computerPlayer;\n      this.winner = oldController.winner;\n      return;\n    }\n    this.humanPlayer = new Player();\n    this.computerPlayer = new ComputerPlayer();\n    this.winner = null;\n  }\n\n  gameStart() {\n    this.computerPlayer.populateBoard();\n    return { game: new GameController(this) };\n  }\n\n  humanPlace(x, y, shipLength, verticle) {\n    // humanPlayer.placeShip() returns a boolean value if it's a good placement\n    if (this.humanPlayer.placeShip(x, y, shipLength, verticle)) {\n      return { error: false, game: new GameController(this) };\n    }\n    return { error: true, game: this };\n  }\n\n  humanAttack(x, y) {\n    if (this.computerPlayer.recieveAttack(x, y)) {\n      if (this.computerPlayer.playerBoard.allSunk()) {\n        this.winner = 'Human';\n        return { error: false, game: new GameController(this) };\n      }\n      this.computerAttack();\n      if (this.humanPlayer.playerBoard.allSunk()) {\n        this.winner = 'Computer';\n        return { error: false, game: new GameController(this) };\n      }\n      return { error: false, game: new GameController(this) };\n    }\n    return { error: true, game: this };\n  }\n\n  computerAttack() {\n    const { x, y } = ComputerPlayer.selectTarget(this.humanPlayer);\n    if (this.humanPlayer.recieveAttack(x, y)) {\n      return { error: false, game: new GameController(this) };\n    }\n    return { error: true, game: this };\n  }\n}\n\nexport default GameController;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\n\nconst Cell = (props) => {\n  const {\n    handleEvent,\n    gridInfo,\n    colIndex,\n    rowIndex,\n    playerFlag,\n  } = props;\n\n  let className = 'board__cell';\n\n  if (gridInfo.ship && gridInfo.attacked) className += ' board__cell--hit';\n  else {\n    if (gridInfo.attacked) className += (' board__cell--miss');\n    if (gridInfo.ship && playerFlag) className += (' board__cell--ship');\n  }\n\n  return (\n    <div\n      className={className}\n      aria-label=\"Board Cell\"\n      data-x={colIndex}\n      data-y={rowIndex}\n      onClick={handleEvent}\n      role=\"button\"\n      tabIndex=\"0\"\n      key={Math.random()}\n    />\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\n\nconst BoardRow = (props) => {\n  const {\n    handleEvent,\n    rowInfo,\n    rowIndex,\n    playerFlag,\n  } = props;\n\n  return (\n    <div className=\"board__row\">\n      {rowInfo.map((gridItem, colIndex) => (\n        <Cell\n          playerFlag={playerFlag}\n          handleEvent={handleEvent}\n          gridInfo={gridItem}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          key={Math.random()}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default BoardRow;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n// import Player from '../gameLogic/Player';\nimport BoardRow from './BoardRow';\n\nconst PlayerBoard = (props) => {\n  // console.log(props);\n  const {\n    player,\n    playerAttack,\n    placeShip,\n  } = props;\n\n  let playerFlag = false;\n  if (placeShip) playerFlag = true;\n\n  const handleEvent = (event) => {\n    if (placeShip) {\n      const { x, y } = event.target.dataset;\n      placeShip(x, y);\n    } else if (playerAttack) {\n      const { x, y } = event.target.dataset;\n      playerAttack(x, y);\n    }\n  };\n\n  if (placeShip) playerFlag = true;\n\n  return (\n    <div className=\"player-area\">\n      <div className=\"player-area__header\">Player</div>\n      <div className=\"board\">\n        {player.playerBoard.grid.map((boardRow, rowIndex) => (\n          <BoardRow\n            handleEvent={handleEvent}\n            playerFlag={playerFlag}\n            rowInfo={boardRow}\n            rowIndex={rowIndex}\n            key={Math.random()}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerBoard;\n","import React from 'react';\n\nconst NextShipInfo = (props) => {\n  const { nextShip, orientation, swapOrientation } = props;\n\n  let orientationStr;\n\n  // This seems wrong\n  // It's what I know, though. :)\n  if (nextShip === undefined) return <div />;\n  if (orientation) {\n    orientationStr = 'Orientation: Verticle';\n  } else {\n    orientationStr = 'Orientation: Horizontal';\n  }\n\n  return (\n    <div className=\"next-ship\">\n      <div className=\"next-ship__header\">\n        Place Your Ship!\n      </div>\n      <div className=\"next-ship__length\">\n        {`Ship Length: ${nextShip}`}\n      </div>\n      <div className=\"next-ship__orientation\">\n        {orientationStr}\n      </div>\n      <button className=\"next-ship__swap-btn\" type=\"button\" onClick={swapOrientation}>\n        Swap Orientation\n      </button>\n    </div>\n  );\n};\n\nexport default NextShipInfo;\n","import React from 'react';\n\nconst Modal = (props) => {\n  // eslint-disable-next-line no-unused-vars\n  const { winner, resetGame } = props;\n  if (!winner) return null;\n  return (\n    <div className=\"win-modal\">\n      <div className=\"win-modal__content\">\n        <div className=\"win-modal__winner\">\n          {`Winner: ${winner}`}\n        </div>\n        <button type=\"button\" className=\"win-modal__resetbtn\" onClick={resetGame}>Play Again</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    Copyright © 2020 Seamus Moore\n  </footer>\n);\n\nexport default Footer;\n","/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-unused-vars\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport GameController from './gameLogic/GameController';\nimport PlayerBoard from './components/PlayerBoard';\nimport NextShipInfo from './components/NextShipInfo';\nimport Modal from './components/Modal';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [gameController, setGameController] = useState(new GameController());\n  const [shipsToPlace, setShipsToPlace] = useState([5, 4, 3, 3, 2, 2]);\n  const [orientation, setOrientation] = useState(true);\n\n  // This is similar to componentDidMount\n  // Use this to set game up\n  useEffect(() => {\n    // Have the computer player set up their board\n    setGameController((oldGame) => {\n      const { game } = oldGame.gameStart();\n      return game;\n    });\n  }, []);\n\n  const resetGame = (event) => {\n    event.preventDefault();\n    setGameController(() => {\n      let game = new GameController();\n      ({ game } = game.gameStart());\n      return game;\n    });\n    setShipsToPlace([5, 4, 3, 3, 2, 2]);\n  };\n\n  // Places the ship of the human player\n  const placeShip = (x, y) => {\n    // get the cords pressed\n    const xCord = parseInt(x, 10);\n    const yCord = parseInt(y, 10);\n    // the next ship in line to be placed\n    const shipLength = shipsToPlace[0];\n    setGameController(() => {\n      // try any place the ship here\n      const { error, game: newGame } = gameController.humanPlace(\n        xCord, yCord, shipLength, orientation,\n      );\n      // If error, gameController is unaffected\n      if (error) {\n        return gameController;\n      }\n      // Get rid of the ship\n      // Should I do this INSIDE of setGameController?\n      // Who knows\n      setShipsToPlace(() => {\n        shipsToPlace.shift();\n        return shipsToPlace;\n      });\n      // update gameController\n      return newGame;\n    });\n  };\n\n  // You shouldn't need a comment to know what this does\n  const swapOrientation = () => {\n    setOrientation(!orientation);\n  };\n\n  // Method used for player attacks\n  const playerAttack = (x, y) => {\n    // Can't attack the enemy, if you have ships to place!\n    if (shipsToPlace.length !== 0) return;\n    // or if you already won/lost\n    if (gameController.winner) return;\n    setGameController(() => {\n      // error is only true if the attack was bad somehow\n      const { error, game: newGame } = gameController.humanAttack(x, y);\n      // gameController SHOULD be unaffected by errors\n      if (error) return gameController;\n      return newGame;\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <Modal winner={gameController.winner} resetGame={resetGame} />\n      <NextShipInfo\n        nextShip={shipsToPlace[0]}\n        orientation={orientation}\n        swapOrientation={swapOrientation}\n      />\n      <div className=\"game-area\">\n        <PlayerBoard\n          player={gameController.humanPlayer}\n          placeShip={placeShip}\n        />\n        <PlayerBoard\n          player={gameController.computerPlayer}\n          playerAttack={playerAttack}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}